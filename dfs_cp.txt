//DFS for CC
#include <bits/stdc++.h> 
#define pb push_back 

using namespace std; 

vector<bool> v; 
vector<vector<int> > g; 

void edge(int a, int b) 
{ 
	g[a].pb(b); 
    //g[b].pb(a); 
} 

void dfs(int u) 
{ 
	stack<int> s;
        cout<<u<<" ";
	s.push(u); 
	v[u] = true; 

	while (!s.empty()) 
	{ 

		int f = s.top(); 

		//cout << f << " "; 
        
		// Enqueue all adjacent of f and mark them visited 
		int temp=0;
		for (auto i = g[f].begin(); i != g[f].end(); i++) 
		{ 
			if (!v[*i]) 
			{
			    cout<<*i<<" ";
				s.push(*i); 
				v[*i] = true; 
				temp=1;
				break;
			}
		} 
		if(temp==0)
		{
		    s.pop();
		}
	} 
} 

int main() 
{ 
	int n, e; 
	cin >> n >> e; 

	v.assign(n, false); 
	g.assign(n, vector<int>()); 

	int a, b; 
	for (int i = 0; i < e; i++) { 
		cin >> a >> b; 
		edge(a, b); 
	} 

	for (int i = 0; i < n; i++) { 
		if (!v[i]) 
			dfs(i); 
	} 

	return 0; 
} 
